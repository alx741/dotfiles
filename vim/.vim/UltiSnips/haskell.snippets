extends yesod, hspec

snippet lang "LANGUAGE extension"
{-# LANGUAGE $1 #-}$0
endsnippet

snippet opt "OPTIONS_GHC pragma"
{-# OPTIONS_GHC $1 #-}$0
endsnippet

snippet stack "stack hash bang" b
#!/usr/bin/env stack
{-  stack
    script
    --resolver lts-9.3
    --package ...
-}
endsnippet

snippet module "module % where"
module `!v expand('%:t:r')` where$0
endsnippet

snippet main "main :: IO ()"
main :: IO ()
main = do
	$0
endsnippet

snippet der "deriving"
deriving (Show$0)
endsnippet

snippet putl "putStrLn"
putStrLn $0
endsnippet

snippet puts "putStr"
putStr $0
endsnippet

snippet getl "getLine"
getLine $0
endsnippet

snippet und "undefined"
undefined
endsnippet

snippet script "haskell scripts boilerplate" b
{-# LANGUAGE OverloadedStrings #-}

import Turtle
import System.Environment (getArgs)

main = do
    args <- getArgs
    case args of
        ["some"]  -> shell "sudo echo some" empty
        ["other"] -> shell "sudo echo other" empty
        _         -> printUsageOrSomething
endsnippet

snippet shake "Shakefile boilerplate" b
import Development.Shake
import Development.Shake.Command
import Development.Shake.FilePath
import Development.Shake.Util

buildDir = "build"

main :: IO ()
main = shakeArgs shakeOptions{shakeFiles=buildDir} $ do
    want $ map ((buildDir ++ "/") ++) scripts

    phony "clean" $ do
        putNormal $ "Cleaning " ++ buildDir
        removeFilesAfter buildDir ["//*"]
        removeFilesAfter "." ["/*.hi", "/*.o"]
endsnippet
